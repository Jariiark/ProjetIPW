require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe FeedsController, type: :controller do

render_views

  describe "contrôle d'accès" do

    it "devrait refuser l'accès pour  'create'" do
      post :create
      response.should redirect_to(signin_path)
    end

    it "devrait refuser l'accès pour  'destroy'" do
      delete :destroy, :id => 1
      response.should redirect_to(signin_path)
    end
  end
  describe "POST 'create'" do



    describe "échec" do

      before(:each) do
        @attr = { :url => "" }
      end

      it "ne devrait pas créer de flux" do
        lambda do
          post :create, :feed => @attr
        end.should_not change(Feed, :count)
      end

      it "devrait retourner la page d'accueil" do
        post :create, :feed => @attr
        response.should render_template('pages/home')
      end
    end

    describe "succès" do



      it "devrait créer un flux" do
        lambda do
          post :create, :feed => @attr
        end.should change(Feed, :count).by(1)
      end

      it "devrait rediriger vers la page d'accueil" do
        post :create, :feed => @attr
        response.should redirect_to(root_path)
      end

      it "devrait avoir un message flash" do
        post :create, :feed => @attr
        flash[:success].should =~ /enregistré/i
      end
    end
  end
 describe "DELETE 'destroy'" do

    describe "pour un utilisateur non auteur du message" do


      it "devrait refuser la suppression du message" do
        delete :destroy, :id => @feed
        response.should redirect_to(root_path)
      end
    end

    describe "pour l'auteur du message" do


      it "devrait détruire le feed" do
        lambda do
          delete :destroy, :id => @feed
        end.should change(Feed, :count).by(-1)
      end
    end
  end
end
